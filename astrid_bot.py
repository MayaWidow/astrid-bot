import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === –î–ê–ù–ù–´–ï –¢–û–í–ê–†–û–í ===
PRODUCTS = [
    {
        "name": "–¢–≤–∏–¥–æ–≤—ã–π –∂–∞–∫–µ—Ç Chanel",
        "price": "800 000 ‚ÇΩ",
        "image_url": "https://i.ibb.co/cKB2D4jq/chanel.jpg",
        "gender": "–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞",
        "type": "–ü–ª–∞—Ç—å—è",
        "brand": "Chanel"
    },
    {
        "name": "–†—É–±–∞—à–∫–∞ –ø–æ–ª–æ Ralph Lauren",
        "price": "15 000 ‚ÇΩ",
        "image_url": "https://i.ibb.co/Dgf640zG/Polo-Ralph-Lauren.jpg",
        "gender": "–ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞",
        "type": "–†—É–±–∞—à–∫–∏/–ü–æ–ª–æ",
        "brand": "Polo Ralph Lauren"
    },
    {
        "name": "–¢—É—Ñ–ª–∏ Jimmy Choo",
        "price": "130 000 ‚ÇΩ",
        "image_url": "https://i.ibb.co/WpF7M4Rk/Jimmy-Choo.jpg",
        "gender": "–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞",
        "type": "–û–±—É–≤—å",
        "brand": "Jimmy Choo"
    },
    {
        "name": "–ü–ª–∞—Ç—å–µ Dolce & Gabbana",
        "price": "150 000 ‚ÇΩ",
        "image_url": "https://i.ibb.co/LzqkFMTq/dolce-gabbana.jpg",
        "gender": "–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞",
        "type": "–ü–ª–∞—Ç—å—è",
        "brand": "Dolce & Gabbana"
    },
    {
        "name": "–õ–æ—Ñ–µ—Ä—ã Horsebit –æ—Ç Gucci",
        "price": "66 000 ‚ÇΩ",
        "image_url": "https://i.ibb.co/S4ntRfSc/GUCCI.jpg",
        "gender": "–ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞",
        "type": "–û–±—É–≤—å",
        "brand": "Gucci"
    },
    {
        "name": "–°–≤–∏—Ç–µ—Ä Hermes",
        "price": "110 000 ‚ÇΩ",
        "image_url": "https://i.ibb.co/GQp60bxR/Hermes.jpg",
        "gender": "–ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞",
        "type": "–¢–æ–ª—Å—Ç–æ–≤–∫–∞/—Ö—É–¥–∏/—Å–≤–∏—Ç–µ—Ä",
        "brand": "Hermes"
    },
    {
        "name": "–ü—É—Ö–æ–≤–∏–∫ Prada re-nylon",
        "price": "110 000 ‚ÇΩ",
        "image_url": "https://i.ibb.co/1tSnsFSb/prada-re-nylon.jpg",
        "gender": "–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞",
        "type": "–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞",
        "brand": "Prada"
    },
    {
        "name": "–®–∞—Ä—Ñ Burberry",
        "price": "65 000 ‚ÇΩ",
        "image_url": "https://i.ibb.co/qFhR20Xd/Burberry.jpg",
        "gender": "–ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞",
        "type": "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã",
        "brand": "Burberry"
    },
    {
        "name": "–ö—É—Ä—Ç–∫–∞ Fendi",
        "price": "200 000 ‚ÇΩ",
        "image_url": "https://i.ibb.co/Qv5SqzP9/Fendi.jpg",
        "gender": "–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞",
        "type": "–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞",
        "brand": "Fendi"
    },
    {
        "name": "–ü–ª–∞—Ç—å–µ Givenchy",
        "price": "500 000 ‚ÇΩ",
        "image_url": "https://i.ibb.co/Q1WbzRR/Givenchy.jpg",
        "gender": "–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞",
        "type": "–ü–ª–∞—Ç—å—è",
        "brand": "Givenchy"
    },
    {
        "name": "–¢—É—Ñ–ª–∏ Versace",
        "price": "115 000 ‚ÇΩ",
        "image_url": "https://i.ibb.co/LDXjtw5q/Versace.jpg",
        "gender": "–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞",
        "type": "–û–±—É–≤—å",
        "brand": "Versace"
    },
    {
        "name": "–•—É–¥–∏ Balenciaga",
        "price": "150 000 ‚ÇΩ",
        "image_url": "https://i.ibb.co/KpNJfrgn/Balenciaga.jpg",
        "gender": "–ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞",
        "type": "–¢–æ–ª—Å—Ç–æ–≤–∫–∞/—Ö—É–¥–∏/—Å–≤–∏—Ç–µ—Ä",
        "brand": "Balenciaga"
    },
    {
        "name": "–ö–æ–∂–∞–Ω–∫–∞ Yves Saint Laurent",
        "price": "780 000 ‚ÇΩ",
        "image_url": "https://i.ibb.co/SwXhscL4/Yves-Saint-Laurent.jpg",
        "gender": "–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞",
        "type": "–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞",
        "brand": "Yves Saint Laurent"
    },
    {
        "name": "–¢—É—Ñ–ª–∏ Christian Louboutin",
        "price": "110 000 ‚ÇΩ",
        "image_url": "https://i.ibb.co/zTmQKt8M/Christian-Louboutin.jpg",
        "gender": "–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞",
        "type": "–û–±—É–≤—å",
        "brand": "Christian Louboutin"
    },
    {
        "name": "–ö—Ä–æ—Å—Å–æ–≤–∫–∏ Christian Louboutin",
        "price": "100 000 ‚ÇΩ",
        "image_url": "https://i.ibb.co/HL2DY0Nt/Christian-Louboutin.jpg",
        "gender": "–ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞",
        "type": "–û–±—É–≤—å",
        "brand": "Christian Louboutin"
    },
    {
        "name": "–¢—É—Ñ–ª–∏ Cesare Paciotti",
        "price": "150 000 ‚ÇΩ",
        "image_url": "https://i.ibb.co/PGCDC83Q/Cesare-Paciotti.jpg",
        "gender": "–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞",
        "type": "–û–±—É–≤—å",
        "brand": "Cesare Paciotti"
    },
    {
        "name": "–†—É–±–∞—à–∫–∞ –ø–æ–ª–æ Lacoste",
        "price": "10 000 ‚ÇΩ",
        "image_url": "https://i.ibb.co/ccQQC7nt/Lacoste.jpg",
        "gender": "–ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞",
        "type": "–†—É–±–∞—à–∫–∏/–ü–æ–ª–æ",
        "brand": "Lacoste"
    },
    {
        "name": "–ü–ª–∞—Ç—å–µ Valentino",
        "price": "300 000 ‚ÇΩ",
        "image_url": "https://i.ibb.co/whwWqx2Y/Valentino.jpg",
        "gender": "–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞",
        "type": "–ü–ª–∞—Ç—å—è",
        "brand": "Valentino"
    },
    {
        "name": "–ü–ª–∞—Ç—å–µ Nina Ricci",
        "price": "180 000 ‚ÇΩ",
        "image_url": "https://i.ibb.co/Hfq88qcQ/Nina-Ricci.jpg",
        "gender": "–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞",
        "type": "–ü–ª–∞—Ç—å—è",
        "brand": "Nina Ricci"
    },
    {
        "name": "–¢—É—Ñ–ª–∏ Mach & Mach",
        "price": "149 000 ‚ÇΩ",
        "image_url": "https://i.ibb.co/6cV61wmH/Mach-Mach.jpg",
        "gender": "–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞",
        "type": "–û–±—É–≤—å",
        "brand": "Mach & Mach"
    }
]

# === –°–¢–†–£–ö–¢–£–†–ê –ö–ê–¢–ï–ì–û–†–ò–ô ===
MEN_CATEGORIES = [
    "–§—É—Ç–±–æ–ª–∫–∏", "–ú–∞–π–∫–∏", "–†—É–±–∞—à–∫–∏/–ü–æ–ª–æ", "–î–∂–∏–Ω—Å—ã", "–ë—Ä—é–∫–∏",
    "–¢–æ–ª—Å—Ç–æ–≤–∫–∞/—Ö—É–¥–∏/—Å–≤–∏—Ç–µ—Ä", "–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞", "–û–±—É–≤—å", "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã"
]

WOMEN_CATEGORIES = [
    "–ü–ª–∞—Ç—å—è", "–ë–ª—É–∑–∫–∏/–†—É–±–∞—à–∫–∏", "–ö—Ä–æ–ø-—Ç–æ–ø—ã/–ú–∞–π–∫–∏", "–¢–æ–ª—Å—Ç–æ–≤–∫–∏/–•—É–¥–∏",
    "–õ–æ–Ω–≥—Å–ª–∏–≤—ã", "–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞", "–Æ–±–∫–∏", "–î–∂–∏–Ω—Å—ã/–ë—Ä—é–∫–∏", "–û–±—É–≤—å"
]

BRANDS = sorted(set(p["brand"] for p in PRODUCTS))  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±—Ä–µ–Ω–¥—ã

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
async def send_product(update: Update, context: ContextTypes.DEFAULT_TYPE, product: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ."""
    caption = f"<b>{product['name']}</b>\n\nüí∞ –¶–µ–Ω–∞: {product['price']}\nüè∑Ô∏è –ë—Ä–µ–Ω–¥: {product['brand']}"
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="back_to_results")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        await context.bot.send_photo(
            chat_id=update.callback_query.message.chat_id,
            photo=product["image_url"],
            caption=caption,
            parse_mode="HTML",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        await update.callback_query.message.reply_text(
            f"üì∑ –§–æ—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n\n{caption}",
            parse_mode="HTML",
            reply_markup=reply_markup
        )

async def show_no_products_found(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."""
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(
        text="–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üòï",
        reply_markup=reply_markup
    )

async def display_search_results(update: Update, context: ContextTypes.DEFAULT_TYPE, products: list):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫."""
    keyboard = [
        [InlineKeyboardButton(p["name"], callback_data=f"product_{i}")]
        for i, p in enumerate(products)
    ]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(
        text=f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=reply_markup
    )

async def display_search_results_as_new_message(update: Update, context: ContextTypes.DEFAULT_TYPE, products: list):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫ –≤ –ù–û–í–û–ú —Å–æ–æ–±—â–µ–Ω–∏–∏."""
    keyboard = [
        [InlineKeyboardButton(p["name"], callback_data=f"product_{i}")]
        for i, p in enumerate(products)
    ]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.message.reply_text(
        text=f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=reply_markup
    )

# === –û–°–ù–û–í–ù–û–ï –ú–ï–ù–Æ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("üü¢ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", update.message.from_user.id)
    keyboard = [
        [InlineKeyboardButton("üëï –ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞", callback_data="men")],
        [InlineKeyboardButton("üëó –ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞", callback_data="women")],
        [InlineKeyboardButton("üè∑Ô∏è –ë—Ä–µ–Ω–¥—ã", callback_data="brands")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Astrid</b>!\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup, parse_mode="HTML")

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "men":
        keyboard = [[InlineKeyboardButton(cat, callback_data=f"men_{cat}")] for cat in MEN_CATEGORIES]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text="üëî –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º—É–∂—Å–∫–æ–π –æ–¥–µ–∂–¥—ã:", reply_markup=reply_markup)

    elif data == "women":
        keyboard = [[InlineKeyboardButton(cat, callback_data=f"women_{cat}")] for cat in WOMEN_CATEGORIES]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text="üëó –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∂–µ–Ω—Å–∫–æ–π –æ–¥–µ–∂–¥—ã:", reply_markup=reply_markup)

    elif data == "brands":
        keyboard = [[InlineKeyboardButton(brand, callback_data=f"brand_{brand}")] for brand in BRANDS]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text="üè∑Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥:", reply_markup=reply_markup)

    elif data == "main":
        keyboard = [
            [InlineKeyboardButton("üëï –ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞", callback_data="men")],
            [InlineKeyboardButton("üëó –ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞", callback_data="women")],
            [InlineKeyboardButton("üè∑Ô∏è –ë—Ä–µ–Ω–¥—ã", callback_data="brands")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text="üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Astrid</b>!\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup, parse_mode="HTML")

    elif data.startswith("men_"):
        category = data[4:]  # "men_–§—É—Ç–±–æ–ª–∫–∏" ‚Üí "–§—É—Ç–±–æ–ª–∫–∏"
        await show_products(update, context, "–ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞", category=category)

    elif data.startswith("women_"):
        category = data[6:]  # "women_–ü–ª–∞—Ç—å—è" ‚Üí "–ü–ª–∞—Ç—å—è"
        await show_products(update, context, "–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞", category=category)

    elif data.startswith("brand_"):
        brand = data[6:]  # "brand_Chanel" ‚Üí "Chanel"
        await show_products(update, context, brand=brand)

    elif data.startswith("product_"):
        index = int(data.split("_")[1])
        products = context.user_data.get('last_search_results', [])
        if 0 <= index < len(products):
            product = products[index]
            await send_product(update, context, product)
        else:
            await query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

    elif data == "back_to_results":
        products = context.user_data.get('last_search_results', [])
        if products:
            await display_search_results_as_new_message(update, context, products)
        else:
            await query.answer("–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.", show_alert=True)
            await query.message.reply_text(
                text="üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Astrid</b>!\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üëï –ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞", callback_data="men")],
                    [InlineKeyboardButton("üëó –ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞", callback_data="women")],
                    [InlineKeyboardButton("üè∑Ô∏è –ë—Ä–µ–Ω–¥—ã", callback_data="brands")]
                ]),
                parse_mode="HTML"
            )

# === –ü–û–ö–ê–ó–ê–¢–¨ –¢–û–í–ê–†–´ ===
async def show_products(update: Update, context: ContextTypes.DEFAULT_TYPE, gender: str = None, category: str = None, brand: str = None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º."""
    products = PRODUCTS

    if gender:
        products = [p for p in products if p["gender"] == gender]
    if category:
        products = [p for p in products if p["type"] == category]
    if brand:
        products = [p for p in products if p["brand"] == brand]

    if not products:
        await show_no_products_found(update, context)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º"
    context.user_data['last_search_results'] = products

    await display_search_results(update, context, products)

# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
def main():
    print("üîß –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    TOKEN = "8294975968:AAEn2if-Cast6nrEhzYildWwWqB6H2BQ1HA"

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
